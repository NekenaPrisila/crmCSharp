@using CRMSharp.ViewModels
@model DashboardViewModel
@{
    ViewData["Title"] = "Leads";
}

<h1 class="display-4">Gestion des Leads</h1>

<div class="mt-4">
    <!-- Ajout des contrôles de pagination en haut -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="dataTables_length">
                <label>
                    Afficher 
                    <select id="pageSizeSelect" class="form-select form-select-sm d-inline-block w-auto">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select> entrées
                </label>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <div id="paginationInfo" class="dataTables_info"></div>
        </div>
    </div>
    
    <table id="leadsTable" class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Status</th>
                <th>Customer</th>
                <th>Assigned Employee</th>
                <th>CreatedAt</th>
                <th>Expense</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var lead in Model.Leads)
            {
                <tr>
                    <td>@lead.Id</td>
                    <td>@lead.Status</td>
                    <td>@lead.Customer</td>
                    <td>@lead.AssignedEmployee</td>
                    <td>@lead.CreatedAt</td>
                    <td>
                        <span class="expense-value">@lead.Expense.ToString("0.00")</span>
                        <form class="expense-form" style="display: none;" onsubmit="updateExpense(event, @lead.Id, 'lead')">
                            <input type="number" step="0.01" class="form-control expense-input" 
                                value="@lead.Expense.ToString(System.Globalization.CultureInfo.InvariantCulture)" />
                            <button type="submit" class="btn btn-success btn-sm mt-1">Enregistrer</button>
                            <button type="button" class="btn btn-secondary btn-sm mt-1" onclick="cancelEdit(event)">Annuler</button>
                        </form>
                    </td>
                    <td>
                        <button class="btn btn-outline-warning btn-sm me-2" onclick="toggleEditForm(event)" title="Modifier">
                            <i class="fas fa-edit"></i> Modifier
                        </button>
                        <a href="@Url.Action("DeleteLead", "Dashboard", new { id = lead.Id })" 
                           class="btn btn-outline-danger btn-sm" 
                           title="Supprimer"
                           onclick="return confirm('Êtes-vous sûr de vouloir supprimer ce lead ?');">
                            <i class="fas fa-trash-alt"></i> Supprimer
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Ajout de la pagination en bas -->
    <div class="row">
        <div class="col-md-12">
            <div id="paginationControls" class="dataTables_paginate paging_simple_numbers">
                <ul class="pagination justify-content-center">
                    <!-- Les boutons seront générés par jQuery -->
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            // Configuration de la pagination
            var table = $('#leadsTable');
            var itemsPerPage = 10;
            var currentPage = 1;
            var rows = table.find('tbody tr');
            var rowsCount = rows.length;
            
            // Initialisation
            function initPagination() {
                // Mise à jour du sélecteur d'items par page
                $('#pageSizeSelect').val(itemsPerPage).change(function() {
                    itemsPerPage = parseInt($(this).val());
                    currentPage = 1;
                    updatePagination();
                });
                
                updatePagination();
            }
            
            // Fonction pour afficher les lignes de la page courante
            function showPage(page) {
                var startIndex = (page - 1) * itemsPerPage;
                var endIndex = startIndex + itemsPerPage;
                
                rows.hide();
                rows.slice(startIndex, endIndex).show();
                
                // Mise à jour des informations de pagination
                updatePaginationInfo();
            }
            
            // Fonction pour mettre à jour les contrôles de pagination
            function updatePagination() {
                var pageCount = Math.ceil(rowsCount / itemsPerPage);
                var paginationControls = $('#paginationControls ul');
                
                paginationControls.empty();
                
                // Bouton Précédent
                paginationControls.append(
                    `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}">Précédent</a>
                    </li>`
                );
                
                // Boutons des pages
                for (var i = 1; i <= pageCount; i++) {
                    paginationControls.append(
                        `<li class="page-item ${i === currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>`
                    );
                }
                
                // Bouton Suivant
                paginationControls.append(
                    `<li class="page-item ${currentPage === pageCount ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}">Suivant</a>
                    </li>`
                );
                
                // Afficher la page courante
                showPage(currentPage);
            }
            
            // Fonction pour mettre à jour les informations de pagination
            function updatePaginationInfo() {
                var startItem = ((currentPage - 1) * itemsPerPage) + 1;
                var endItem = Math.min(currentPage * itemsPerPage, rowsCount);
                
                $('#paginationInfo').text(
                    `Affichage de ${startItem} à ${endItem} sur ${rowsCount} entrées`
                );
            }
            
            // Gestion des clics sur les boutons de pagination
            $('#paginationControls').on('click', 'a.page-link', function(e) {
                e.preventDefault();
                currentPage = parseInt($(this).data('page'));
                updatePagination();
            });
            
            // Initialisation
            initPagination();
            
            // Vos fonctions existantes
            window.toggleEditForm = function(event) {
                event.preventDefault();
                const row = $(event.target).closest('tr');
                const expenseValue = row.find('.expense-value');
                const expenseForm = row.find('.expense-form');

                expenseValue.hide();
                expenseForm.show();
            };

            window.cancelEdit = function(event) {
                event.preventDefault();
                const row = $(event.target).closest('tr');
                const expenseValue = row.find('.expense-value');
                const expenseForm = row.find('.expense-form');

                expenseValue.show();
                expenseForm.hide();
            };

            window.updateExpense = async function(event, id, type) {
                event.preventDefault();
                const form = $(event.target);
                const expenseInput = form.find('.expense-input');
                const newExpense = parseFloat(expenseInput.val()).toFixed(2);

                try {
                    const response = await fetch(`/Dashboard/Update${type}Expense`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ id, expense: newExpense }),
                    });

                    if (response.ok) {
                        const row = form.closest('tr');
                        const expenseValue = row.find('.expense-value');
                        expenseValue.text(newExpense);
                        cancelEdit(event);
                    } else {
                        alert('Erreur lors de la mise à jour.');
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                }
            };
        });
    </script>
}