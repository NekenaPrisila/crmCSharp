@using CRMSharp.ViewModels
@model DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<div class="text-center">
    <h1 class="display-4">Bienvenue sur le Dashboard</h1>
    <p>Gérez vos tickets, leads et clients efficacement.</p>
</div>

<div class="mt-5">
    <h3>Totaux</h3>
    <div class="row row-eq-height">
        <!-- Tickets -->
        <div class="col-md-4 d-flex">
            <a href="@Url.Action("Tickets", "Dashboard")" class="text-decoration-none text-body w-100">
                <div class="card clickable-card h-100">
                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <h5 class="card-title text-primary">Tickets</h5>
                            <p class="card-text display-4">@Model.TotalTickets</p>
                            <div class="d-flex align-items-baseline">
                                <span class="fw-bold fs-6 me-2">Expense Ticket Total :</span>
                                <span class="fs-5 fw-bold text-primary">@Model.TotalExpenseTickets.ToString("0.00")</span>
                            </div>
                        </div>
                        <div class="text-end">
                            <i class="fas fa-ticket-alt fa-3x text-primary"></i>
                        </div>
                    </div>
                </div>
            </a>
        </div>

        <!-- Leads -->
        <div class="col-md-4 d-flex">
            <a href="@Url.Action("Leads", "Dashboard")" class="text-decoration-none text-body w-100">
                <div class="card clickable-card h-100">
                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <h5 class="card-title text-success">Leads</h5>
                            <p class="card-text display-4">@Model.TotalLeads</p>
                            <div class="d-flex align-items-baseline">
                                <span class="fw-bold fs-6 me-2">Expense Lead Total :</span>
                                <span class="fs-5 fw-bold text-success">@Model.TotalExpenseLeads.ToString("0.00")</span>
                            </div>
                        </div>
                        <div class="text-end">
                            <i class="fas fa-user-plus fa-3x text-success"></i>
                        </div>
                    </div>
                </div>
            </a>
        </div>

        <!-- Clients -->
        <div class="col-md-4 d-flex">
            <a href="@Url.Action("Customers", "Dashboard")" class="text-decoration-none text-body w-100">
                <div class="card clickable-card h-100">
                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <h5 class="card-title text-warning">Clients</h5>
                            <p class="card-text display-4">@Model.TotalCustomers</p>
                            <div class="d-flex align-items-baseline">
                                <span class="fw-bold fs-6 me-2">Total Budget Customers:</span>
                                <span class="fs-5 fw-bold text-warning">@Model.TotalBudgetCustomers.ToString("0.00")</span>
                            </div>
                            <div class="d-flex align-items-baseline mt-2">
                                <span class="fw-bold fs-6 me-2">Total expense Customers:</span>
                                <span class="fs-5 fw-bold text-warning">@Model.TotalExpenseCustomers.ToString("0.00")</span>
                            </div>
                        </div>
                        <div class="text-end">
                            <i class="fas fa-users fa-3x text-warning"></i>
                        </div>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>

<!-- Section Graphiques -->
<div class="mt-5">
    <h3>Graphiques</h3>
    <div class="row">
        <!-- Graphique des Tickets -->
        <div class="col-md-4">
            <canvas id="ticketLeadChart" width="600" height="600"></canvas>
        </div>
        <!-- Graphique des Leads -->
        <div class="col-md-4">
            <canvas id="depenceCustomerChart" width="600" height="300"></canvas>
        </div>
        <!-- Graphique des Clients -->
        <div class="col-md-4">
            <canvas id="budgetCustomerChart" width="600" height="600"></canvas>
        </div>
    </div>
</div>

<!-- Script pour les graphiques -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>

    // Fonction pour générer des couleurs dynamiques en fonction du nombre de clients
    function generateDynamicColors(count) {
        var colors = [];
        var hueStep = 360 / count; // Répartition uniforme des teintes
        
        for (var i = 0; i < count; i++) {
            var hue = Math.floor(hueStep * i);
            // Couleurs HSL pour une meilleure variété visuelle
            colors.push(`hsla(${hue}, 70%, 60%, 0.7)`); // Version claire
        }
        return colors;
    }

    // 1. Graphique Comparaison Leads/Tickets (Bar Chart)
    new Chart(
        document.getElementById('ticketLeadChart').getContext('2d'),
        {
            type: 'bar',
            data: {
                labels: ['Leads', 'Tickets'],
                datasets: [{
                    label: 'Montant en ',
                    data: [
                        parseFloat(@Model.TotalExpenseLeads).toFixed(2),
                        parseFloat(@Model.TotalExpenseTickets).toFixed(2)
                    ],
                    backgroundColor: [
                        'rgba(54, 162, 235, 0.7)',
                        'rgba(255, 99, 132, 0.7)'
                    ],
                    borderColor: [
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 99, 132, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    title: {
                        display: true,
                        text: 'Dépenses Leads vs Tickets',
                        font: { size: 16 }
                    },
                    tooltip: {
                        callbacks: {
                            label: ctx => `${ctx.raw} `
                        }
                    },
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        formatter: value => `${parseFloat(value).toFixed(2)} `,
                        font: { weight: 'bold' }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: value => `${value} `
                        }
                    }
                }
            }
        }
    );

    // 2ème Graphique - Dépenses par client (Pie Chart)
    var customerExpense = document.getElementById('depenceCustomerChart').getContext('2d');

    // Fonction pour générer des couleurs dynamiques
    function generateDynamicColors(count) {
        var colors = [];
        var hueStep = 360 / count;
        for (var i = 0; i < count; i++) {
            colors.push(`hsla(${Math.floor(hueStep * i)}, 70%, 60%, 0.7)`);
        }
        return colors;
    }

    var customerData = @Html.Raw(Json.Serialize(Model.Customers.Select(c => c.Expense)));
    var customerLabels = @Html.Raw(Json.Serialize(Model.Customers.Select(c => c.Name)));

    var customerChart = new Chart(customerExpense, {
        type: 'pie', // Changé de doughnut à pie
        data: {
            labels: customerLabels,
            datasets: [{
                data: customerData,
                backgroundColor: generateDynamicColors(customerData.length),
                borderColor: 'rgba(255, 255, 255, 0.8)',
                borderWidth: 2,
                hoverOffset: 10
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Répartition des dépenses par client',
                    font: {
                        size: 16
                    }
                },
                legend: {
                    position: 'right',
                    labels: {
                        boxWidth: 12,
                        padding: 20,
                        font: {
                            size: 12
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const label = context.label || '';
                            const value = context.raw || 0;
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = Math.round((value / total) * 100);
                            return `${label}: ${value} (${percentage}%)`;
                        }
                    }
                }
            },
            animation: {
                animateScale: true,
                animateRotate: true
            }
        }
    });


    // Graphique des Clients - Doughnut Chart avec couleurs dynamiques
    var customerCtx = document.getElementById('budgetCustomerChart').getContext('2d');

    // Données des clients
    var customerData = @Html.Raw(Json.Serialize(Model.Customers.Select(c => c.Budget)));
    var customerLabels = @Html.Raw(Json.Serialize(Model.Customers.Select(c => c.Name)));

    var customerChart = new Chart(customerCtx, {
        type: 'doughnut',
        data: {
            labels: customerLabels,
            datasets: [{
                data: customerData,
                backgroundColor: generateDynamicColors(customerData.length),
                borderColor: 'rgba(255, 255, 255, 0.8)', // Bordure blanche pour meilleur contraste
                borderWidth: 2,
                hoverOffset: 10 // Effet de survol
            }]
        },
        options: {
            responsive: true,
            cutout: '65%', // Contrôle l'épaisseur du donut
            plugins: {
                title: {
                    display: true,
                    text: 'Répartition du budget par client',
                    font: {
                        size: 16
                    }
                },
                legend: {
                    position: 'right',
                    labels: {
                        boxWidth: 12,
                        padding: 20,
                        font: {
                            size: 12
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            var label = context.label || '';
                            var value = context.raw || 0;
                            var total = context.dataset.data.reduce((a, b) => a + b, 0);
                            var percentage = Math.round((value / total) * 100);
                            return `${label}: ${value} (${percentage}%)`;
                        }
                    }
                }
            },
            animation: {
                animateScale: true,
                animateRotate: true
            }
        }
    });
</script>

<style>
    .clickable-card {
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .clickable-card:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .clickable-card i {
        float: right;
        margin-top: 10px;
        color: #45484b;
    }

    .clickable-card:hover i {
        color: #333435;
    }
</style>

<style>
    .row-eq-height {
        display: flex;
        flex-wrap: wrap;
    }
    .row-eq-height > [class*='col-'] {
        display: flex;
    }
    .clickable-card {
        transition: all 0.3s ease;
    }
    .clickable-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    /* Taille des polices */
    .card-title {
        font-size: 1.2rem;
    }
    .display-4 {
        font-size: 2.5rem;
    }
    .fs-5 {
        font-size: 1.1rem;
    }
    .fs-6 {
        font-size: 0.9rem;
    }
</style>